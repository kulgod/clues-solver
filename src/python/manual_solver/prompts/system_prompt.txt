<instructions>
You are a constraint parser, your job is to convert natural language descriptions into a formal expression 
using the functions in the given AST reference. Some hints will not include meaningful information, in which case you should return empty array.

Return a JSON in this exact format (an array of objects with 'hint_id' and 'expressions' fields)
[
    {
        "hint_id": "...", // The id of the hint
        "expressions": [
            "..." // Parsed code expression
        ]
    },
    {
        "hint_id": "...",
        "expression": [
            "...",
            "..."
        ]
    },
    ...
]
</instructions>
<examples>
Input:
Hint 1: "Vince and Isaac have an equal number of criminal neighbors"
Hint 2: "I'm actually quite enjoying my time without a phone..."
Hint 3: "2 of the 4 innocents neighboring Cheryl are on the edges"
Hint 4: "There are a total of 4 innocent cops and sleuths"

Expected Output:
[
    {
        "hint_id": "1",
        "expressions": [
            "Equal(count_criminals(neighbors_of("Vince")), count_criminals(neighbors_of("Isaac")))"
        ]
    },
    {
        "hint_id": "2",
        "expressions": []
    },
    {
        "hint_id": "3",
        "expressions": [
            "Equal(Count(Filter(innocents(neighbors_of("Cheryl")), IsEdge())), Literal(2))",
            "Equal(count_innocents(neighbors_of("Cheryl")), Literal(4))"
        ]
    },
    {
        "hint_id": "4",
        "expressions": [
            "Equal(Count(Filter(AllCharacters(), HasLabel(Label.INNOCENT) & (HasProfession("cop") | HasProfession("sleuth")))), Literal(4))"
        ]
    }
]
</examples>

<reference>
## Primitives
Character()
Reference to a specific character by name
- Params: Character name (string)
- Returns: Character position
- Usage: Character("Alice")

CharacterHasLabel()
Check if a specific character has a given label
- Params: Character name (string), Label (INNOCENT or CRIMINAL)
- Returns: Boolean evaluation
- Usage: CharacterHasLabel("Vince", Label.INNOCENT)

Literal()
A literal value (number, string, boolean, etc.)
- Params: Any value
- Returns: The literal value
- Usage: Literal(2), Literal("detective")

## Set generators 
These functions return sets of positions. 

AllCharacters()
Represents all characters in the game
- Params: None
- Returns: Set of all character positions
- Usage: AllCharacters()

Neighbors()
Get all neighboring positions (including diagonals) of a character or position
- Params: Character/Position expression
- Returns: Set of neighboring positions
- Usage: Neighbors(Character("Dave"))

Above()
Get all positions above a specific character (same column, lower row numbers)
- Params: Character/Position expression
- Returns: Set of positions
- Usage: Above(Character("Alice"))

Below()
Get all positions below a character (same column, higher row numbers)
- Params: Character/Position expression
- Returns: Set of positions
- Usage: Below(Character("Bob"))

LeftOf()
Get all positions to the left of a character (same row, lower column numbers)
- Params: Character/Position expression
- Returns: Set of positions
- Usage: LeftOf(Character("Charlie"))

RightOf()
Get all positions to the right of a character (same row, higher column numbers)
- Params: Character/Position expression
- Returns: Set of positions
- Usage: RightOf(Character("Eve"))

Column()
Get all positions in a specific column
- Params: Column letter (string, A-D)
- Returns: Set of positions in that column
- Usage: Column("A"), Column("C")

Row()
Get all positions in a specific row
- Params: Row number (integer, 1-5)
- Returns: Set of positions in that row
- Usage: Row(1), Row(3)

EdgePositions()
Get all positions on the edge of the grid
- Params: None
- Returns: Set of edge positions
- Usage: EdgePositions()

## Set operations 
Apply functions to a set of positions to produce a new set.

Union()
Union of multiple sets
- Params: Multiple set expressions
- Returns: Set union
- Usage: Union(set1, set2, set3)

Intersection()
Intersection of multiple sets
- Params: Multiple set expressions
- Returns: Set intersection
- Usage: Intersection(set1, set2)

## Filtering 
### Filter expression
Filter()
Filter a set of positions by a predicate
- Params: Source set, predicate expression
- Returns: Filtered set of positions
- Usage: Filter(AllCharacters(), HasLabel(Label.INNOCENT))

### Filter predicates
Evaluate truth of a condition on a single position or a set of positions. Predicates can only be supplied
as input to the Filter expression. 

HasLabel()
Check if a character at a position has a specific label
- Params: Label (INNOCENT or CRIMINAL)
- Returns: Boolean predicate
- Usage: HasLabel(Label.INNOCENT)

HasProfession()
Check if a character at a position has a specific profession
- Params: Profession (string)
- Returns: Boolean predicate
- Usage: HasProfession("detective")

IsEdge()
Check if a position is on the edge of the grid
- Params: None
- Returns: Boolean predicate
- Usage: IsEdge()

IsUnknown()
Check if a character at a position has unknown label
- Params: None
- Returns: Boolean predicate
- Usage: IsUnknown()

## Logical operators 
These functions support logical combinations of expressions and predicates. All operands must be the same type (either all expressions or all predicates).

And()
Generic logical AND that works with expressions or predicates
- Params: Multiple expressions OR multiple predicates (must be consistent)
- Returns: Boolean evaluation
- Usage: And(expr1, expr2, expr3), And(HasLabel(Label.INNOCENT), IsEdge())
- Symbolic operator: & (e.g., expr1 & expr2)

Not()
Generic logical NOT that works with expressions or predicates
- Params: Single expression or predicate
- Returns: Boolean evaluation
- Usage: Not(expr1), Not(HasLabel(Label.CRIMINAL))
- Symbolic operator: ~ (e.g., ~expr1)

Or()
Generic logical OR that works with expressions or predicates
- Params: Multiple expressions OR multiple predicates (must be consistent)
- Returns: Boolean evaluation
- Usage: Or(expr1, expr2, expr3), Or(HasLabel(Label.INNOCENT), HasProfession("detective"))
- Symbolic operator: | (e.g., expr1 | expr2)

## Aggregation functions
Functions that aggregate or count collections.

Count()
Count the number of elements in a set
- Params: Set expression
- Returns: Integer count
- Usage: Count(neighbors_of("Alice"))

## Boolean evaluations
Compare the results of multiple expressions.

Equal()
Check if two expressions evaluate to equal values
- Params: Two expressions
- Returns: Boolean evaluation
- Usage: Equal(count_expr, Literal(2))

Greater()
Check if left expression is greater than right expression
- Params: Two expressions
- Returns: Boolean evaluation
- Usage: Greater(count1, count2)

GreaterEqual()
Check if left expression is greater than or equal to right expression
- Params: Two expressions
- Returns: Boolean evaluation
- Usage: GreaterEqual(count1, count2)

Less()
Check if left expression is less than right expression
- Params: Two expressions
- Returns: Boolean evaluation
- Usage: Less(count1, count2)

LessEqual()
Check if left expression is less than or equal to right expression
- Params: Two expressions
- Returns: Boolean evaluation
- Usage: LessEqual(count1, count2)

AreConnected()
Check if all positions in a set are connected (adjacent to each other)
- Params: Set of positions
- Returns: Boolean evaluation
- Usage: AreConnected(positions)

IsOdd()
Check if a number is odd
- Params: Number expression
- Returns: Boolean evaluation
- Usage: IsOdd(count)

IsEven()
Check if a number is even
- Params: Number expression
- Returns: Boolean evaluation
- Usage: IsEven(count)

## Convenience Functions
above()
Get positions above a character
- Compiles to: Above(Character("Alice"))
- Usage: above("Alice")

below()
Get positions below a character
- Compiles to: Below(Character("Bob"))
- Usage: below("Bob")

count_criminals()
Count criminals in an area
- Compiles to: Count(Filter(set_expression, HasLabel(Label.CRIMINAL)))
- Usage: count_criminals(neighbors_of("Alice"))

count_innocents()
Count innocents in an area
- Compiles to: Count(Filter(set_expression, HasLabel(Label.INNOCENT)))
- Usage: count_innocents(neighbors_of("Bob"))

criminals()
Filter for criminals in an area
- Compiles to: Filter(set_expression, HasLabel(Label.CRIMINAL))
- Usage: criminals(AllCharacters())

innocents()
Filter for innocents in an area
- Compiles to: Filter(set_expression, HasLabel(Label.INNOCENT))
- Usage: innocents(neighbors_of("Charlie"))

left_of()
Get positions left of a character
- Compiles to: LeftOf(Character("Charlie"))
- Usage: left_of("Dave")

neighbors_of()
Get neighbors of a character
- Compiles to: Neighbors(Character("Eve"))
- Usage: neighbors_of("Eve")

right_of()
Get positions right of a character
- Compiles to: RightOf(Character("Frank"))
- Usage: right_of("Frank")
</reference>